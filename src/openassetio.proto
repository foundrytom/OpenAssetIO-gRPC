// SPDX-License-Identifier: Apache-2.0
// Copyright 2013-2023 The Foundry Visionmongers Ltd
syntax = "proto3";

/**
 * This proto defines an rpc service that implements the OpenAssetIO
 * ManagerInterface contract.
 *
 * A single server can instantiate multiple manager implementations, and
 * so provides additional methods to manage their lifetime, based on
 * that of the ManagerImplementationFactoryInterface.
 */
package openassetio_grpc_proto;

/*
 * Common messages for OpenAssetIO data objects.
 */

message EmptyRequest {}
message EmptyResponse {}

message ErrorMsg {
    int32 code = 1;
    string errorMessage = 2;
}

message InfoDictMsg {
    map<string, bool> bools = 1;
    map<string, int64> ints = 2;
    map<string, double> floats = 3;
    map<string, string> strings = 4;
}

message HostMsg {
    string identifier = 1;
    string displayName = 2;
}

message HostSessionMsg {
    HostMsg host = 1;
}

message ContextMsg {
    int32 access = 1;
    int32 retention = 2;
    TraitsDataMsg locale = 3;
}

message TraitSetMsg {
    repeated string traitId = 1;
}

message TraitsDataMsg {
    message TraitMsg {
        string id = 1;
        map<string, bool> bools = 2;
        map<string, int64> ints = 3;
        map<string, double> floats = 4;
        map<string, string> strings = 5;
    }
    repeated TraitMsg trait = 1;
}

/*
 * Messages for ManagerImplementationFactory methods
 */

message IdentifiersResponse {
	repeated string identifier = 1;
};


message InstantiateRequest {
    string identifier = 1;
}

message InstantiateResponse {
    string handle = 1;
}


message DestroyRequest {
    string handle = 1;
}


/*
 * Messages for ManagerInterface methods
 */


message IdentifierRequest {
    string handle = 1;
}

message IdentifierResponse {
    string identifier = 1;
}


message DisplayNameRequest {
    string handle = 1;
}

message DisplayNameResponse {
    string displayName = 1;
}


message InfoRequest {
    string handle = 1;
}

message InfoResponse {
    InfoDictMsg info = 1;
}


message InitializeRequest {
    string handle = 1;
    HostSessionMsg hostSession = 2;
    InfoDictMsg settings = 3;
}


message ManagementPolicyRequest {
    string handle = 1;
    HostSessionMsg hostSession = 2;
    ContextMsg context = 3;
    repeated TraitSetMsg traitSet = 4;
}

 message ManagementPolicyResponse {
    repeated TraitsDataMsg policy = 1;
 }


 message IsEntityReferenceStringRequest {
    string handle = 1;
    HostSessionMsg hostSession = 2;
    string someString = 3;
 }

 message IsEntityReferenceStringResponse {
    bool is = 1;
 }


 message ResolveRequest {
    string handle = 1;
    HostSessionMsg hostSession = 2;
    ContextMsg context = 3;
    TraitSetMsg traitSet = 4;
    repeated string entityReference = 5;
 }

 message ResolveResponse {
    message ResultOrErrorMsg {
        uint64 index = 1;
        oneof result_oneof {
            TraitsDataMsg result = 2;
            ErrorMsg error = 3;
        }
    }
    repeated ResultOrErrorMsg resultOrError = 1;
 }


/*
 * Service definition
 *
 * The same service covers both factory and interface methods.
 *
 * The service assigns a unique handle to each manager implementation
 * that it instantiates. This is returned in the InstantiateResponse,
 * and must be supplied as the handle parameter in all ManagerInterface
 * method requests so that they are routed to the correct instance.
 */
service ManagerProxy  {
    // MawnagerImplementationFactoryInterface methods
	rpc Identifiers(EmptyRequest) returns (IdentifiersResponse);
    rpc Instantiate(InstantiateRequest) returns (InstantiateResponse);
    // ManagerInterface methods
    rpc Identifier(IdentifierRequest) returns (IdentifierResponse);
    rpc DisplayName(DisplayNameRequest) returns (DisplayNameResponse);
    rpc Info(InfoRequest) returns (InfoResponse);
    rpc Initialize(InitializeRequest) returns (EmptyResponse);
    rpc ManagementPolicy(ManagementPolicyRequest) returns (ManagementPolicyResponse);
    rpc IsEntityReferenceString(IsEntityReferenceStringRequest) returns (IsEntityReferenceStringResponse);
    rpc Resolve(ResolveRequest) returns (ResolveResponse);
    // Lifetime management
    rpc Destroy(DestroyRequest) returns (EmptyResponse);
};

